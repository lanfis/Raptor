#!/usr/bin/env python
# license removed for brevity
import os
import sys
current_folder = os.path.dirname(os.path.realpath(__file__))
sys.path.append(current_folder)
main_folder = os.path.join(current_folder, "..")
sys.path.append(main_folder)

import numpy as np
import tensorflow as tf
from tensorflow import keras

#from StringIO import StringIO

tf.logging.set_verbosity(tf.logging.INFO)

class Input_Layer:
    kwas = {}
    layer = None
    
    def __init__(self, shape, batch_size=None, tensor=None, sparse=False, dtype=None, name=None, **kwargs):
        '''
        shape: A shape tuple (integers), not including the batch size. For instance, shape=(32,) indicates that the expected input will be batches of 32-dimensional vectors.
        batch_size: optional static batch size (integer).
        name: An optional name string for the layer. Should be unique in a model (do not reuse the same name twice). It will be autogenerated if it isn't provided.
        dtype: The data type expected by the input, as a string (float32, float64, int32...)
        sparse: A boolean specifying whether the placeholder to be created is sparse.
        tensor: Optional existing tensor to wrap into the Input layer. If set, the layer will not create a placeholder tensor.
        **kwargs: deprecated arguments support.
        '''
        kwargs['shape'] = shape
        kwargs['batch_size'] = batch_size
        kwargs['tensor'] = tensor
        kwargs['sparse'] = sparse
        kwargs['dtype'] = dtype
        kwargs['name'] = name
            
        self.layer = self.keras_layer(**kwargs)
    
    def __call__(self):
        return self.layer
        
    def keras_layer(self, **kwargs):
        kwargs['dtype'] = kwargs['dtype'] if kwargs['dtype'] is not None else tf.float32
        
        self.layer = keras.layers.Input(**kwargs)
        return self.layer
        


